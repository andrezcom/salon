const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';
const TEST_USER_ID = '68b871502ef2b330e41d2391'; // Usuario de prueba existente
const BUSINESS_ID = '68b8c3e2c9765a8720a6b622'; // Negocio de prueba existente

async function testProductCRUD() {
  console.log('üì¶ Iniciando pruebas del CRUD completo de productos...\n');

  let productId = null;

  try {
    // ===== CREATE - Crear producto =====
    console.log('üÜï CREATE: Crear producto\n');

    const createData = {
      name: 'Shampoo Profesional Test',
      brand: 'Test Brand',
      category: 'Cuidado del Cabello',
      subcategory: 'Shampoo',
      costPrice: 35.00,
      inputPrice: 0.70,
      clientPrice: 50.00,
      expertPrice: 42.00,
      packageInfo: {
        qtyPerPackage: 1,
        unitSize: 50,
        unitType: 'ml',
        packageType: 'botella'
      },
      uses: {
        isInput: true,
        isRetail: true,
        isWholesale: false
      },
      inventory: {
        currentStock: 0,
        minimumStock: 5,
        maximumStock: 30,
        reorderPoint: 5,
        reorderQuantity: 15
      },
      supplier: {
        name: 'Distribuidora Test',
        contact: 'Juan P√©rez',
        phone: '+52 55 1234 5678',
        email: 'ventas@test.com'
      },
      description: 'Shampoo profesional para cabello te√±ido - Producto de prueba',
      tags: ['shampoo', 'profesional', 'cabello', 'test'],
      userId: TEST_USER_ID
    };

    console.log('üíÑ Creando producto...');
    const createResponse = await axios.post(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products`, createData);

    if (createResponse.data.success) {
      productId = createResponse.data.data._id;
      console.log('‚úÖ Producto creado exitosamente');
      console.log(`   ‚Ä¢ ID: ${productId}`);
      console.log(`   ‚Ä¢ Nombre: ${createResponse.data.data.name}`);
      console.log(`   ‚Ä¢ Marca: ${createResponse.data.data.brand}`);
      console.log(`   ‚Ä¢ SKU: ${createResponse.data.data.sku}`);
      console.log(`   ‚Ä¢ Stock inicial: ${createResponse.data.data.inventory.currentStock}`);
    } else {
      throw new Error('No se pudo crear el producto');
    }

    // ===== READ - Leer producto espec√≠fico =====
    console.log('\nüìñ READ: Leer producto espec√≠fico\n');

    console.log('üîç Obteniendo producto...');
    const readResponse = await axios.get(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products/${productId}`);

    if (readResponse.data.success) {
      console.log('‚úÖ Producto obtenido exitosamente');
      console.log(`   ‚Ä¢ Nombre: ${readResponse.data.data.name}`);
      console.log(`   ‚Ä¢ Categor√≠a: ${readResponse.data.data.category}`);
      console.log(`   ‚Ä¢ Precio cliente: $${readResponse.data.data.clientPrice}`);
      console.log(`   ‚Ä¢ Precio experto: $${readResponse.data.data.expertPrice}`);
      console.log(`   ‚Ä¢ Activo: ${readResponse.data.data.isActive ? 'S√ç' : 'NO'}`);
    } else {
      throw new Error('No se pudo obtener el producto');
    }

    // ===== UPDATE - Actualizar producto =====
    console.log('\n‚úèÔ∏è UPDATE: Actualizar producto\n');

    const updateData = {
      name: 'Shampoo Profesional Test - ACTUALIZADO',
      clientPrice: 55.00,
      expertPrice: 45.00,
      description: 'Shampoo profesional actualizado - Versi√≥n mejorada',
      tags: ['shampoo', 'profesional', 'cabello', 'test', 'actualizado'],
      userId: TEST_USER_ID
    };

    console.log('üìù Actualizando producto...');
    const updateResponse = await axios.put(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products/${productId}`, updateData);

    if (updateResponse.data.success) {
      console.log('‚úÖ Producto actualizado exitosamente');
      console.log(`   ‚Ä¢ Nombre: ${updateResponse.data.data.name}`);
      console.log(`   ‚Ä¢ Precio cliente: $${updateResponse.data.data.clientPrice}`);
      console.log(`   ‚Ä¢ Precio experto: $${updateResponse.data.data.expertPrice}`);
      console.log(`   ‚Ä¢ Descripci√≥n: ${updateResponse.data.data.description}`);
    } else {
      throw new Error('No se pudo actualizar el producto');
    }

    // ===== READ ALL - Leer todos los productos =====
    console.log('\nüìã READ ALL: Leer todos los productos\n');

    console.log('üìä Obteniendo lista de productos...');
    const readAllResponse = await axios.get(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products`);

    if (readAllResponse.data.success) {
      console.log('‚úÖ Lista de productos obtenida exitosamente');
      console.log(`   ‚Ä¢ Total productos: ${readAllResponse.data.total}`);
      console.log(`   ‚Ä¢ Productos en p√°gina: ${readAllResponse.data.data.length}`);
      console.log(`   ‚Ä¢ P√°gina actual: ${readAllResponse.data.page}`);
      console.log(`   ‚Ä¢ Total p√°ginas: ${readAllResponse.data.totalPages}`);
    } else {
      throw new Error('No se pudo obtener la lista de productos');
    }

    // ===== SOFT DELETE - Eliminar producto (soft delete) =====
    console.log('\nüóëÔ∏è SOFT DELETE: Eliminar producto (soft delete)\n');

    const deleteData = {
      reason: 'Producto de prueba - eliminaci√≥n por testing',
      permanent: false,
      userId: TEST_USER_ID
    };

    console.log('üóëÔ∏è Eliminando producto (soft delete)...');
    const deleteResponse = await axios.delete(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products/${productId}`, {
      data: deleteData
    });

    if (deleteResponse.data.success) {
      console.log('‚úÖ Producto eliminado exitosamente (soft delete)');
      console.log(`   ‚Ä¢ Acci√≥n: ${deleteResponse.data.data.action}`);
      console.log(`   ‚Ä¢ Se puede restaurar: ${deleteResponse.data.data.canRestore ? 'S√ç' : 'NO'}`);
      console.log(`   ‚Ä¢ Producto activo: ${deleteResponse.data.data.product.isActive ? 'S√ç' : 'NO'}`);
      console.log(`   ‚Ä¢ Producto descontinuado: ${deleteResponse.data.data.product.isDiscontinued ? 'S√ç' : 'NO'}`);
    } else {
      throw new Error('No se pudo eliminar el producto');
    }

    // ===== RESTORE - Restaurar producto =====
    console.log('\nüîÑ RESTORE: Restaurar producto\n');

    console.log('üîÑ Restaurando producto...');
    const restoreResponse = await axios.patch(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products/${productId}/restore`, {
      userId: TEST_USER_ID
    });

    if (restoreResponse.data.success) {
      console.log('‚úÖ Producto restaurado exitosamente');
      console.log(`   ‚Ä¢ Producto activo: ${restoreResponse.data.data.isActive ? 'S√ç' : 'NO'}`);
      console.log(`   ‚Ä¢ Producto descontinuado: ${restoreResponse.data.data.isDiscontinued ? 'S√ç' : 'NO'}`);
      console.log(`   ‚Ä¢ Raz√≥n de eliminaci√≥n: ${restoreResponse.data.data.deletionReason || 'N/A'}`);
    } else {
      throw new Error('No se pudo restaurar el producto');
    }

    // ===== VERIFICACI√ìN FINAL =====
    console.log('\nüîç VERIFICACI√ìN FINAL\n');

    console.log('üìä Verificando estado final del producto...');
    const finalCheckResponse = await axios.get(`${BASE_URL}/inventory/business/${BUSINESS_ID}/products/${productId}`);

    if (finalCheckResponse.data.success) {
      const product = finalCheckResponse.data.data;
      console.log('‚úÖ Verificaci√≥n final exitosa');
      console.log(`   ‚Ä¢ Nombre: ${product.name}`);
      console.log(`   ‚Ä¢ Activo: ${product.isActive ? 'S√ç' : 'NO'}`);
      console.log(`   ‚Ä¢ Descontinuado: ${product.isDiscontinued ? 'S√ç' : 'NO'}`);
      console.log(`   ‚Ä¢ Fecha de actualizaci√≥n: ${product.updatedAt}`);
    }

    // ===== RESUMEN FINAL =====
    console.log('\nüéâ ¬°CRUD COMPLETO DE PRODUCTOS PROBADO EXITOSAMENTE!');
    console.log('\nüìã RESUMEN DE LA PRUEBA:');
    console.log(`   ‚úÖ CREATE - Producto creado`);
    console.log(`   ‚úÖ READ - Producto le√≠do individualmente`);
    console.log(`   ‚úÖ UPDATE - Producto actualizado`);
    console.log(`   ‚úÖ READ ALL - Lista de productos obtenida`);
    console.log(`   ‚úÖ SOFT DELETE - Producto eliminado (soft delete)`);
    console.log(`   ‚úÖ RESTORE - Producto restaurado`);

    console.log('\nüí° FUNCIONALIDADES PROBADAS:');
    console.log(`   ‚úÖ Creaci√≥n de productos con datos completos`);
    console.log(`   ‚úÖ Lectura individual de productos`);
    console.log(`   ‚úÖ Actualizaci√≥n de productos`);
    console.log(`   ‚úÖ Listado paginado de productos`);
    console.log(`   ‚úÖ Soft delete (eliminaci√≥n l√≥gica)`);
    console.log(`   ‚úÖ Restauraci√≥n de productos eliminados`);
    console.log(`   ‚úÖ Validaciones de seguridad`);
    console.log(`   ‚úÖ Manejo de errores`);

    console.log('\nüöÄ EL CRUD COMPLETO DE PRODUCTOS EST√Å FUNCIONANDO PERFECTAMENTE!');

  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
    if (error.response) {
      console.error('üìä Respuesta del servidor:', error.response.status, error.response.data);
    }
  }
}

// Ejecutar las pruebas
testProductCRUD();
